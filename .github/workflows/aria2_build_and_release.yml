name: "ARIA2 Build and Release"

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-on-ubuntu:
    runs-on: ubuntu-latest
    container: "ghcr.io/abcfy2/musl-cross-toolchain-ubuntu:${{ matrix.CROSS_HOST }}"
    strategy:
      fail-fast: false
      matrix:
        CROSS_HOST:
          - arm-unknown-linux-musleabi
          - aarch64-unknown-linux-musl
          - x86_64-unknown-linux-musl
          - i686-unknown-linux-musl
          - x86_64-w64-mingw32
          - i686-w64-mingw32
        ARIA2_VER: [""] # 默认值为 master，可为特定版本（如 1.36.0）
        USE_CHINA_MIRROR: [0] # 默认值为 0，设置为 1 使用中国镜像
        USE_ZLIB_NG: [1] # 默认值为 1，表示使用 zlib-ng 而不是 zlib
        USE_LIBRESSL: [0] # 默认值为 0，表示使用 OpenSSL，可以设置为 1 以使用 LibreSSL

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/cache@v4
        id: cache
        with:
          path: downloads/
          key: build-cache-${{ matrix.CROSS_HOST }}-${{ github.sha }}
          restore-keys: |
            build-cache-${{ matrix.CROSS_HOST }}-

      - name: compile
        env:
          CROSS_HOST: "${{ matrix.CROSS_HOST }}"
          ARIA2_VER: "${{ matrix.ARIA2_VER }}"
          USE_CHINA_MIRROR: "${{ matrix.USE_CHINA_MIRROR }}"
          USE_ZLIB_NG: "${{ matrix.USE_ZLIB_NG }}"
          USE_LIBRESSL: "${{ matrix.USE_LIBRESSL }}"
        run: |
          chmod +x "${GITHUB_WORKSPACE}/build.sh"
          "${GITHUB_WORKSPACE}/build.sh"

      - name: Package aria2 binary
        env:
          CROSS_HOST: "${{ matrix.CROSS_HOST }}"
          ARIA2_VER: "${{ matrix.ARIA2_VER }}"
          USE_LIBRESSL: "${{ matrix.USE_LIBRESSL }}"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          apt install -y zip curl
          if [ -z "${ARIA2_VER}" ]; then
            echo "Fetching latest ARIA2 version from GitHub..."
            ARIA2_VER=$(curl -s https://api.github.com/repos/aria2/aria2/releases/latest | grep -oP '"tag_name": "\K(.*)(?=")' | sed 's/release-//')
          fi
          echo "ARIA2 version: $ARIA2_VER"
          echo "ARIA2_VER=${ARIA2_VER}" >> $GITHUB_ENV

          if [ x"${USE_LIBRESSL}" = x"1" ]; then
            ARCHIVE_NAME="aria2-${ARIA2_VER}-${CROSS_HOST//-unknown/}_libressl_static.zip"
          else
            ARCHIVE_NAME="aria2-${ARIA2_VER}-${CROSS_HOST//-unknown/}_static.zip"
          fi
          echo "ARCHIVE_NAME=${ARCHIVE_NAME}" >> $GITHUB_ENV
          zip -j9v "/tmp/${ARCHIVE_NAME}" "${GITHUB_WORKSPACE}"/aria2c*

          mkdir -p release
          cp "/tmp/${ARCHIVE_NAME}" "release/${ARCHIVE_NAME}"
          cp build_info.md "release/aria2-${ARIA2_VER}-${CROSS_HOST//-unknown/}.md"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: aria2-${{ env.ARIA2_VER }}-${{ matrix.CROSS_HOST }}
          path: |
            release/

  build-macos-arm64:
    name: Build macOS arm64
    runs-on: macos-14
    strategy:
      matrix:
        architecture: ['arm64']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build
        run: |
          brew install autoconf
          brew install automake
          brew install wget
          git clone https://github.com/aria2/aria2.git
          cd aria2
          if [ -d "$GITHUB_WORKSPACE/patch" ]; then
            for patch_file in $GITHUB_WORKSPACE/patch/*.patch; do
              patch -p1 < "$patch_file" || exit 1
            done
          fi
          cp ../makerelease-osx-v2.mk ./
          mkdir build-release
          cd build-release
          ln -s ../makerelease-osx-v2.mk Makefile
          make ARCH=${{ matrix.architecture }}
          cd aria2-def/bin
          tar -zcf aria2c-macos-${{ matrix.architecture }}.tar.gz aria2c
          cp aria2c-macos-${{ matrix.architecture }}.tar.gz ${{ github.workspace }}/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: aria2c-macos-${{ matrix.architecture }}
          path: aria2c-macos-${{ matrix.architecture }}.tar.gz

  build-macos-x86_64:
    name: Build macOS x86_64
    runs-on: macos-13
    strategy:
      matrix:
        architecture: ['x86_64']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build
        run: |
          brew install autoconf
          brew install automake
          brew install wget
          git clone https://github.com/aria2/aria2.git
          cd aria2
          if [ -d "$GITHUB_WORKSPACE/patch" ]; then
            for patch_file in $GITHUB_WORKSPACE/patch/*.patch; do
              patch -p1 < "$patch_file" || exit 1
            done
          fi
          cp ../makerelease-osx-v2.mk ./
          mkdir build-release
          cd build-release
          ln -s ../makerelease-osx-v2.mk Makefile
          make ARCH=${{ matrix.architecture }}
          cd aria2-def/bin
          tar -zcf aria2c-macos-${{ matrix.architecture }}.tar.gz aria2c
          cp aria2c-macos-${{ matrix.architecture }}.tar.gz ${{ github.workspace }}/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: aria2c-macos-${{ matrix.architecture }}
          path: aria2c-macos-${{ matrix.architecture }}.tar.gz

  Release:
    needs: [build-on-ubuntu, build-macos-arm64,build-macos-x86_64]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: release
          pattern: aria2-*
          merge-multiple: true

      - name: Merge and clean .md files
        run: |
          cd release
          echo "List of downloaded files:"
          ls -laR .

          touch build_info.txt
          find . -maxdepth 1 -type f -name "*.md" -print0 | xargs -0 ls -t | while read -r file; do
            if [[ -f "$file" ]]; then
              echo "Appending content of $file to build_info.txt"
              cat "$file" >> build_info.txt
              echo "" >> build_info.txt
            fi
          done
          rm *.md
          mv build_info.txt build_info.md

          echo "Final list of files in release directory:"
          ls -laR .

      - name: Prepare and Create Prerelease
        if: github.event_name == 'schedule'
        run: |
          NOW=$(date --utc)
          echo "NOW=$NOW"

          gh release delete continuous --cleanup-tag || true
          gh release create continuous -p -t 'Continuous build' --notes "Building time: $NOW
          - - -
          "
          gh release edit continuous --draft=false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Prerelease assets
        if: github.event_name == 'schedule'
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: continuous
          name: Continuous build
          body_path: release/build_info.md
          draft: false
          prerelease: true
          append_body: true
          files: |
            release/*.zip

      - name: Delete existing release and tag if they exist
        if: github.event_name == 'workflow_dispatch'
        run: |
          ARIA2_VER=$(curl -s https://api.github.com/repos/aria2/aria2/releases/latest | grep -oP '"tag_name": "\K(.*)(?=")' | sed 's/release-//')
          echo "ARIA2 version: $ARIA2_VER"
          echo "ARIA2_VER=${ARIA2_VER}" >> $GITHUB_ENV

          RELEASE_ID=$(gh api -H "Accept: application/vnd.github.v3+json" "repos/${{ github.repository }}/releases/tags/v${ARIA2_VER}" -q .id)
          if [ -n "$RELEASE_ID" ]; then
            echo "Deleting existing release with tag v${ARIA2_VER} (ID: $RELEASE_ID)..."
            gh release delete "v${ARIA2_VER}" --cleanup-tag
          else
            echo "No release found with tag v${ARIA2_VER}. Skipping deletion."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release and Upload Assets
        if: github.event_name == 'workflow_dispatch'
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.ARIA2_VER }}
          name: Aria2 v${{ env.ARIA2_VER }} static
          body_path: release/build_info.md
          draft: false
          prerelease: false
          files: |
            release/*.zip
